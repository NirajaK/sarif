name: Sarif complete workflow
on:
  push:
    branches:
      - main
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker
        uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "debug": true,
              "experimental": true,
              "features": {
                "containerd-snapshotter": true
              }
            }
      - name: Generate Dockerfile
        run: |
          echo -e "FROM alpine\nCMD ["echo", "Hello StackOverflow!"]" > Dockerfile
          ls
          pwd
      - name: Download Qscanner
        run: |
          QSCANNER_URL=$(curl $proxy -s https://www.qualys.com/downloads/qscanner/ | grep -ai "gen_cask_artifacts" | sed 's/^.*https/https/' | sed 's/".*//')
          wget https://www.qualys.com/qscanner/download/v4.2.0/download_qscanner.sh
          ls -ltr
          pwd
          sudo bash $(pwd)/download_qscanner.sh
      - name: Docker version
        run: docker info
      - name: Docker image pull
        run: docker pull alpine:latest  
      - name: Build Docker image
        run: |
          docker buildx create --use
          docker buildx inspect
          docker buildx build --file /home/runner/work/sarif/sarif/Dockerfile --platform linux/amd64,linux/arm64 -t crmtestimage:multiid --load .
      - name: List docker images
        run: docker images
      - name: docker inspect
        run: |
         image_sha=$(docker inspect -f '{{.Id}}' alpine:latest)
         echo "Image SHA: $image_sha"
         docker history $image_sha
      - name: save multi-arch image
        run: |
          image_sha=$(docker inspect -f '{{.Id}}' crmtestimage:multiid)
          echo "Image ID: $image_sha"
          docker save -o multiarchtest.tar $image_sha
          ls
      - name: Qscanner token
        run: |
          export QUALYS_ACCESS_TOKEN=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJxdWF5c195YTYyIiwiaXNzIjoicWFzIiwicG9ydGFsVXNlcklkIjoxNjUxMTAwNjUsInNlY3JldElkIjoiOTUyZDBkNWUtY2VkYi00YjNhLTk3MGUtODgwMTlkNzZlYzM2IiwicXdlYlVzZXJJZCI6MTA1OTU3NywiYXVkIjoicWFzIiwiY3VzdG9tZXJJZCI6NDg2NjY0LCJ1c2VyVXVpZCI6ImJjMTFkMjZlLWQwOTctNzRiZC04MzE3LTA5MGIxN2E1NjUzZiIsInN1YnNjcmlwdGlvblV1aWQiOiIxZGZmNGJhNS03NzIwLTRlZWQtODJkZi05ZDRjZjM4YTdhMjciLCJleHAiOjE3MzIwMDEwMzIsInN1YnNjcmlwdGlvbklkIjo3NDk5MzIsInRva2VuVHlwZSI6InN1YnNjcmlwdGlvbiIsImlhdCI6MTcwMDQ0MzQzMiwianRpIjoiZjRiZTdlMDYtOGE1ZS00YTc0LWEwY2MtM2FkNzI4ZmQwZGRiIn0.koXs2l-laNyUZ3ygmSu8tJ041SnPxg2fhsKwc7p3IuhnnKIezgqK83KpW7n1JUE0DSIwt-MHmvUDyuBKeFLcEQ
          echo $QUALYS_ACCESS_TOKEN
      - name: Image scan through Qscanner
        run: |
         image_sha=$(docker inspect -f '{{.Id}}' alpine:latest)
         sockpath=$(docker info -f '{{.DockerRootDir}}')
         sockpath=$(echo $sockpath | awk -v srch="data" -v repl="docker.sock" '{ sub(srch,repl,$0); print $0 }')
         echo $sockpath
         echo "sudo $(pwd)/linux-amd64/qscanner image $image_sha  --gateway-url https://gateway.qg3.apps.qualys.com/cms/cli/v1.0 --access-token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJxdWF5c195YTYyIiwiaXNzIjoicWFzIiwicG9ydGFsVXNlcklkIjoxNjUxMTAwNjUsInNlY3JldElkIjoiOTUyZDBkNWUtY2VkYi00YjNhLTk3MGUtODgwMTlkNzZlYzM2IiwicXdlYlVzZXJJZCI6MTA1OTU3NywiYXVkIjoicWFzIiwiY3VzdG9tZXJJZCI6NDg2NjY0LCJ1c2VyVXVpZCI6ImJjMTFkMjZlLWQwOTctNzRiZC04MzE3LTA5MGIxN2E1NjUzZiIsInN1YnNjcmlwdGlvblV1aWQiOiIxZGZmNGJhNS03NzIwLTRlZWQtODJkZi05ZDRjZjM4YTdhMjciLCJleHAiOjE3MzIwMDEwMzIsInN1YnNjcmlwdGlvbklkIjo3NDk5MzIsInRva2VuVHlwZSI6InN1YnNjcmlwdGlvbiIsImlhdCI6MTcwMDQ0MzQzMiwianRpIjoiZjRiZTdlMDYtOGE1ZS00YTc0LWEwY2MtM2FkNzI4ZmQwZGRiIn0.koXs2l-laNyUZ3ygmSu8tJ041SnPxg2fhsKwc7p3IuhnnKIezgqK83KpW7n1JUE0DSIwt-MHmvUDyuBKeFLcEQ
         sudo DOCKER_HOST=unix://$sockpath $(pwd)/linux-amd64/qscanner image $image_sha  --gateway-url https://gateway.qg3.apps.qualys.com/cms/cli/v1.0 --access-token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJxdWF5c195YTYyIiwiaXNzIjoicWFzIiwicG9ydGFsVXNlcklkIjoxNjUxMTAwNjUsInNlY3JldElkIjoiOTUyZDBkNWUtY2VkYi00YjNhLTk3MGUtODgwMTlkNzZlYzM2IiwicXdlYlVzZXJJZCI6MTA1OTU3NywiYXVkIjoicWFzIiwiY3VzdG9tZXJJZCI6NDg2NjY0LCJ1c2VyVXVpZCI6ImJjMTFkMjZlLWQwOTctNzRiZC04MzE3LTA5MGIxN2E1NjUzZiIsInN1YnNjcmlwdGlvblV1aWQiOiIxZGZmNGJhNS03NzIwLTRlZWQtODJkZi05ZDRjZjM4YTdhMjciLCJleHAiOjE3MzIwMDEwMzIsInN1YnNjcmlwdGlvbklkIjo3NDk5MzIsInRva2VuVHlwZSI6InN1YnNjcmlwdGlvbiIsImlhdCI6MTcwMDQ0MzQzMiwianRpIjoiZjRiZTdlMDYtOGE1ZS00YTc0LWEwY2MtM2FkNzI4ZmQwZGRiIn0.koXs2l-laNyUZ3ygmSu8tJ041SnPxg2fhsKwc7p3IuhnnKIezgqK83KpW7n1JUE0DSIwt-MHmvUDyuBKeFLcEQ --report-format sarif
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: code-verify-Report.sarif.json
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: my-analysis-tool
